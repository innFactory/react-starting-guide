{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"New React Component": {
		"prefix": "reactcomponent",
		"scope": "javascript,typescript,react",
		"body": [
			"import { createStyles, Theme, withStyles, WithStyles } from '@material-ui/core';",
			"import * as React from 'react';",
			"",
			"export namespace $TM_FILENAME_BASE {",
			"export interface Props extends WithStyles<typeof styles>  {",
			"}",
			"",
			"export interface State {",
			"}",
			"}",
			"",
			"class $TM_FILENAME_BASE extends React.Component<$TM_FILENAME_BASE.Props, $TM_FILENAME_BASE.State> {",
			"",
			"constructor(props?: ($TM_FILENAME_BASE.Props), context?: any) {",
			"super(props as any, context);",
			"}",
			"",
			"state = {",
			"};",
			"",
			"render() {",
			"const { classes } = this.props;",
			"",
			"return (",
			"<div className={classes.container}>",
			"<div />",
			"</div>",
			");",
			"}",
			"}",
			"",
			"const styles = (theme: Theme) => createStyles({",
			"container: {",
			"},",
			"});",
			"",
			"export default withStyles(styles)<$TM_FILENAME_BASE.Props>($TM_FILENAME_BASE);",
		],
		"description": "New React Component"
	},
	"div with className": {
		"prefix": "divc",
		"body": [
			"<div className={classes.container}>",
			"",
			"</div>"
		],
		"description": "div with className"
	},
	"props with classes": {
		"prefix": "props",
		"body": [
			"const { classes } = this.props;"
		],
		"description": "props with classes"
	},
	"state": {
		"prefix": "state",
		"body": [
			"const { } = this.state;"
		],
		"description": "const { } = this.state;"
	},
	"classes prop": {
		"prefix": "class",
		"body": [
			"className={classes.$0}"
		],
		"description": "classNames={classes.}"
	},
	"getDerivedStateFromProps": {
		"prefix": "getDerivedStateFromProps",
		"body": [
			"static getDerivedStateFromProps(nextProps: Readonly<$TM_FILENAME_BASE.Props>, prevState: Readonly<$TM_FILENAME_BASE.State>) {",
			"// return new state",
			"return {  };",
			"}"
		],
		"description": "getDerivedStateFromProps"
	}
}